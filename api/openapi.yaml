openapi: "3.1.0"
info:
  version: 0.0.1
  title: Go Bloggy API
  description: A simple & lightweight backend for developers' personal blogs
  license:
    name: MIT License
    url: https://github.com/samgozman/go-bloggy/blob/main/LICENSE
  contact:
    name: Sam Gozman
    url: https://github.com/samgozman/go-bloggy
paths:
  /health:
    get:
      summary: Health check
      description: Check if the server is up and running
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
  /login/github/authorize:
    post:
      summary: Authorize with GitHub
      description: |
        Exchange a GitHub code (from API
        GET `https://github.com/login/oauth/authorize?client_id=&redirect_uri=`
        for a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GitHubAuthRequestBody"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWTToken"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
        '403':
          description: Forbidden error if the user is not allowed to access the admin panel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /login/refresh:
    post:
      summary: Refresh the JWT token
      description: Refresh the JWT token if it's expired
      headers:
        Authorization:
          description: The JWT token
          required: true
          schema:
            type: string
            format: bearer
            example: Bearer <token>
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWTToken"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
        '401':
          description: Unauthorized error if the user is not allowed to access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /posts:
    post:
      summary: Create a new post
      description: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
      headers:
        Authorization:
        description: JWT Auth token
        required: true
        schema:
          type: string
          format: bearer
          example: Bearer <token>
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
        '401':
          description: Unauthorized error if the user is not allowed to access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
        '409':
          description: Conflict error if the post already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
    get:
      summary: Get all posts
      description: Get all posts
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 25
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostsListResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /posts/{slug}:
    get:
      summary: Get a post by slug
      description: Get a post by slug
      parameters:
        - name: slug
          in: path
          required: true
          description: The URL slug of the post
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
        '404':
          description: Not Found error if the post doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
    put:
      summary: Update a post by slug
      description: Update a post by slug
      parameters:
        - name: slug
          in: path
          required: true
          description: The URL slug of the post
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
      headers:
        Authorization:
        description: JWT Auth token
        required: true
        schema:
        type: string
        format: bearer
        example: Bearer <token>
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
        '401':
          description: Unauthorized error if the user is not allowed to access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
        '404':
          description: Not Found error if the post doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
components:
  schemas:
    RequestError:
      type: object
      properties:
        code:
          type: string
          example: "error_code"
        message:
          type: string
          example: "Error message"
      required: [ "code", "message" ]
    HealthCheckResponse:
      type: object
      properties:
        status:
          type: string
          example: "OK"
      required: [ "status" ]
    GitHubAuthRequestBody:
      type: object
      properties:
        code:
          type: string
          example: "1234567890abcdef"
      required: [ "code" ]
    JWTToken:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required: [ "token" ]
    PostRequest:
      type: object
      description: A post object to be created
      properties:
        title:
          type: string
          example: "My first post"
        slug:
          type: string
          description: The URL slug of the post. Should be unique and URL-friendly.
          example: "my-first-post"
        description:
          type: string
          description: A short description of the post for the index page
          example: "This is my first post"
        keywords:
          type: array
          description: Keywords for the post for SEO and search purposes
          items:
            type: string
            example: [ "golang", "openapi" ]
        content:
          type: string
          example: "### Hello, world!\n"
      required: [ "title", "slug", "description", "content" ]
    PostResponse:
      type: object
      description: A post object after it's been created or fetched
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "My first post"
        slug:
          type: string
          example: "my-first-post"
        description:
          type: string
          example: "This is my first post"
        keywords:
          type: array
          items:
            type: string
            example: [ "golang", "openapi" ]
        content:
          type: string
          example: "### Hello, world!\n"
        reading_time:
          type: integer
          example: 90
          description: Approximate post reading time in seconds
        created_at:
          type: string
          format: date-time
          example: "2021-08-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2021-08-01T00:00:00Z"
      required: [ "id", "title", "slug", "description", "content", "reading_time", "created_at", "updated_at" ]
    PostsListItem:
      type: object
      properties:
        title:
          type: string
          example: "My first post"
        slug:
          type: string
          example: "my-first-post"
        description:
          type: string
          example: "This is my first post"
        keywords:
          type: array
          items:
            type: string
            example: [ "golang", "openapi" ]
        reading_time:
          type: integer
          example: 90
          description: Approximate post reading time in seconds
        created_at:
          type: string
          format: date-time
          example: "2021-08-01T00:00:00Z"
      required: [ "title", "slug", "description", "reading_time", "created_at" ]
    PostsListResponse:
      type: object
      description: A list of posts
      properties:
        posts:
          type: array
          items:
            $ref: "#/components/schemas/PostsListItem"
        total:
          type: integer
          example: 1
      required: [ "posts", "total" ]
