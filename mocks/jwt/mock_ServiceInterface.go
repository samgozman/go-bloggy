// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockServiceInterface is an autogenerated mock type for the ServiceInterface type
type MockServiceInterface struct {
	mock.Mock
}

// CreateTokenString provides a mock function with given fields: userID, expiresAt
func (_m *MockServiceInterface) CreateTokenString(userID string, expiresAt time.Time) (string, error) {
	ret := _m.Called(userID, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for CreateTokenString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time) (string, error)); ok {
		return rf(userID, expiresAt)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time) string); ok {
		r0 = rf(userID, expiresAt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(userID, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseTokenString provides a mock function with given fields: tokenString
func (_m *MockServiceInterface) ParseTokenString(tokenString string) (string, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ParseTokenString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockServiceInterface creates a new instance of MockServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceInterface {
	mock := &MockServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
