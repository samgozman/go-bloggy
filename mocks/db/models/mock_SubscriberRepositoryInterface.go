// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/samgozman/go-bloggy/internal/db/models"
	mock "github.com/stretchr/testify/mock"
)

// MockSubscriberRepositoryInterface is an autogenerated mock type for the SubscriberRepositoryInterface type
type MockSubscriberRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, s
func (_m *MockSubscriberRepositoryInterface) Create(ctx context.Context, s *models.Subscriber) error {
	ret := _m.Called(ctx, s)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Subscriber) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockSubscriberRepositoryInterface) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockSubscriberRepositoryInterface) GetByID(ctx context.Context, id string) (*models.Subscriber, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Subscriber
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Subscriber, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Subscriber); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Subscriber)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfirmed provides a mock function with given fields: ctx
func (_m *MockSubscriberRepositoryInterface) GetConfirmed(ctx context.Context) ([]*models.Subscriber, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConfirmed")
	}

	var r0 []*models.Subscriber
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Subscriber, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Subscriber); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Subscriber)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, s
func (_m *MockSubscriberRepositoryInterface) Update(ctx context.Context, s *models.Subscriber) error {
	ret := _m.Called(ctx, s)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Subscriber) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockSubscriberRepositoryInterface creates a new instance of MockSubscriberRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriberRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriberRepositoryInterface {
	mock := &MockSubscriberRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
