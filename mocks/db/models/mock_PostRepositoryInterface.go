// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/samgozman/go-bloggy/internal/db/models"
	mock "github.com/stretchr/testify/mock"
)

// MockPostRepositoryInterface is an autogenerated mock type for the PostRepositoryInterface type
type MockPostRepositoryInterface struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx
func (_m *MockPostRepositoryInterface) Count(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, p
func (_m *MockPostRepositoryInterface) Create(ctx context.Context, p *models.Post) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Post) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, page, perPage
func (_m *MockPostRepositoryInterface) FindAll(ctx context.Context, page int, perPage int) ([]*models.Post, error) {
	ret := _m.Called(ctx, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Post, error)); ok {
		return rf(ctx, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.Post); ok {
		r0 = rf(ctx, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySlug provides a mock function with given fields: ctx, slug
func (_m *MockPostRepositoryInterface) GetBySlug(ctx context.Context, slug string) (*models.Post, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetBySlug")
	}

	var r0 *models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Post, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Post); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, p
func (_m *MockPostRepositoryInterface) Update(ctx context.Context, p *models.Post) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Post) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockPostRepositoryInterface creates a new instance of MockPostRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostRepositoryInterface {
	mock := &MockPostRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
