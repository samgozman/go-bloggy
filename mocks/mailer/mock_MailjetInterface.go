// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mailjet "github.com/mailjet/mailjet-apiv3-go/v4"
	mock "github.com/stretchr/testify/mock"
)

// MockMailjetInterface is an autogenerated mock type for the MailjetInterface type
type MockMailjetInterface struct {
	mock.Mock
}

// SendMailV31 provides a mock function with given fields: data, options
func (_m *MockMailjetInterface) SendMailV31(data *mailjet.MessagesV31, options ...mailjet.RequestOptions) (*mailjet.ResultsV31, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendMailV31")
	}

	var r0 *mailjet.ResultsV31
	var r1 error
	if rf, ok := ret.Get(0).(func(*mailjet.MessagesV31, ...mailjet.RequestOptions) (*mailjet.ResultsV31, error)); ok {
		return rf(data, options...)
	}
	if rf, ok := ret.Get(0).(func(*mailjet.MessagesV31, ...mailjet.RequestOptions) *mailjet.ResultsV31); ok {
		r0 = rf(data, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailjet.ResultsV31)
		}
	}

	if rf, ok := ret.Get(1).(func(*mailjet.MessagesV31, ...mailjet.RequestOptions) error); ok {
		r1 = rf(data, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockMailjetInterface creates a new instance of MockMailjetInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailjetInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailjetInterface {
	mock := &MockMailjetInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
