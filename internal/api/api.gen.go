// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ConfirmSubscriberRequest defines model for ConfirmSubscriberRequest.
type ConfirmSubscriberRequest struct {
	// Token The confirmation token
	Token string `json:"token"`
}

// CreateSubscriberRequest defines model for CreateSubscriberRequest.
type CreateSubscriberRequest struct {
	// Captcha The captcha token
	Captcha string `json:"captcha"`
	Email   string `json:"email"`
}

// GitHubAuthRequestBody defines model for GitHubAuthRequestBody.
type GitHubAuthRequestBody struct {
	Code string `json:"code"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Status string `json:"status"`
}

// JWTToken defines model for JWTToken.
type JWTToken struct {
	Token string `json:"token"`
}

// PostRequest A post object to be created
type PostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`

	// Slug The URL slug of the post. Should be unique and URL-friendly.
	Slug  string `json:"slug"`
	Title string `json:"title"`
}

// PostResponse A post object after it's been created or fetched
type PostResponse struct {
	Content     string    `json:"content"`
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Id          int       `json:"id"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int       `json:"reading_time"`
	Slug        string    `json:"slug"`
	Title       string    `json:"title"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// PostsListItem defines model for PostsListItem.
type PostsListItem struct {
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int    `json:"reading_time"`
	Slug        string `json:"slug"`
	Title       string `json:"title"`
}

// PostsListResponse A list of posts
type PostsListResponse struct {
	Posts []PostsListItem `json:"posts"`
	Total int             `json:"total"`
}

// PutPostRequest A post object to be updated
type PutPostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`
	Title    string    `json:"title"`
}

// RequestError defines model for RequestError.
type RequestError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// UnsubscribeRequest defines model for UnsubscribeRequest.
type UnsubscribeRequest struct {
	// Reason The reason for unsubscribing. Optional, do not plan to save it in DB, only for logging purposes.
	Reason         *string `json:"reason,omitempty"`
	SubscriptionId string  `json:"subscription_id"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostLoginGithubAuthorizeJSONRequestBody defines body for PostLoginGithubAuthorize for application/json ContentType.
type PostLoginGithubAuthorizeJSONRequestBody = GitHubAuthRequestBody

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = PostRequest

// PutPostsSlugJSONRequestBody defines body for PutPostsSlug for application/json ContentType.
type PutPostsSlugJSONRequestBody = PutPostRequest

// DeleteSubscribersJSONRequestBody defines body for DeleteSubscribers for application/json ContentType.
type DeleteSubscribersJSONRequestBody = UnsubscribeRequest

// PostSubscribersJSONRequestBody defines body for PostSubscribers for application/json ContentType.
type PostSubscribersJSONRequestBody = CreateSubscriberRequest

// PostSubscribersConfirmJSONRequestBody defines body for PostSubscribersConfirm for application/json ContentType.
type PostSubscribersConfirmJSONRequestBody = ConfirmSubscriberRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Authorize with GitHub
	// (POST /login/github/authorize)
	PostLoginGithubAuthorize(ctx echo.Context) error
	// Refresh the JWT token
	// (POST /login/refresh)
	PostLoginRefresh(ctx echo.Context) error
	// Get all posts
	// (GET /posts)
	GetPosts(ctx echo.Context, params GetPostsParams) error
	// Create a new post
	// (POST /posts)
	PostPosts(ctx echo.Context) error
	// Get a post by slug
	// (GET /posts/{slug})
	GetPostsSlug(ctx echo.Context, slug string) error
	// Update a post by slug
	// (PUT /posts/{slug})
	PutPostsSlug(ctx echo.Context, slug string) error
	// Send a post by slug via email
	// (POST /posts/{slug}/send-email)
	PostPostsSlugSendEmail(ctx echo.Context, slug string) error
	// Unsubscribe from the blog
	// (DELETE /subscribers)
	DeleteSubscribers(ctx echo.Context) error
	// Create subscriber for the blog
	// (POST /subscribers)
	PostSubscribers(ctx echo.Context) error
	// Confirm subscriber's email
	// (POST /subscribers/confirm)
	PostSubscribersConfirm(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// PostLoginGithubAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginGithubAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginGithubAuthorize(ctx)
	return err
}

// PostLoginRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginRefresh(ctx)
	return err
}

// GetPosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPosts(ctx, params)
	return err
}

// PostPosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostPosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPosts(ctx)
	return err
}

// GetPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostsSlug(ctx, slug)
	return err
}

// PutPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) PutPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutPostsSlug(ctx, slug)
	return err
}

// PostPostsSlugSendEmail converts echo context to params.
func (w *ServerInterfaceWrapper) PostPostsSlugSendEmail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPostsSlugSendEmail(ctx, slug)
	return err
}

// DeleteSubscribers converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubscribers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSubscribers(ctx)
	return err
}

// PostSubscribers converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscribers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSubscribers(ctx)
	return err
}

// PostSubscribersConfirm converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscribersConfirm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSubscribersConfirm(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.POST(baseURL+"/login/github/authorize", wrapper.PostLoginGithubAuthorize)
	router.POST(baseURL+"/login/refresh", wrapper.PostLoginRefresh)
	router.GET(baseURL+"/posts", wrapper.GetPosts)
	router.POST(baseURL+"/posts", wrapper.PostPosts)
	router.GET(baseURL+"/posts/:slug", wrapper.GetPostsSlug)
	router.PUT(baseURL+"/posts/:slug", wrapper.PutPostsSlug)
	router.POST(baseURL+"/posts/:slug/send-email", wrapper.PostPostsSlugSendEmail)
	router.DELETE(baseURL+"/subscribers", wrapper.DeleteSubscribers)
	router.POST(baseURL+"/subscribers", wrapper.PostSubscribers)
	router.POST(baseURL+"/subscribers/confirm", wrapper.PostSubscribersConfirm)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
