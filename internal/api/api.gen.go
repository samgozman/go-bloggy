// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ConfirmSubscriberRequest defines model for ConfirmSubscriberRequest.
type ConfirmSubscriberRequest struct {
	// Captcha The captcha token
	Captcha string `json:"captcha"`

	// Token The confirmation token
	Token string `json:"token"`
}

// CreateSubscriberRequest defines model for CreateSubscriberRequest.
type CreateSubscriberRequest struct {
	// Captcha The captcha token
	Captcha string `json:"captcha"`
	Email   string `json:"email"`
}

// GitHubAuthRequestBody defines model for GitHubAuthRequestBody.
type GitHubAuthRequestBody struct {
	Code string `json:"code"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Status string `json:"status"`
}

// JWTToken defines model for JWTToken.
type JWTToken struct {
	Token string `json:"token"`
}

// PostRequest A post object to be created
type PostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`

	// Slug The URL slug of the post. Should be unique and URL-friendly.
	Slug  string `json:"slug"`
	Title string `json:"title"`
}

// PostResponse A post object after it's been created or fetched
type PostResponse struct {
	Content     string    `json:"content"`
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Id          int       `json:"id"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int       `json:"reading_time"`
	Slug        string    `json:"slug"`
	Title       string    `json:"title"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// PostsListItem defines model for PostsListItem.
type PostsListItem struct {
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int    `json:"reading_time"`
	Slug        string `json:"slug"`
	Title       string `json:"title"`
}

// PostsListResponse A list of posts
type PostsListResponse struct {
	Posts []PostsListItem `json:"posts"`
	Total int             `json:"total"`
}

// PutPostRequest A post object to be updated
type PutPostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`
	Title    string    `json:"title"`
}

// RequestError defines model for RequestError.
type RequestError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// UnsubscribeRequest defines model for UnsubscribeRequest.
type UnsubscribeRequest struct {
	// Reason The reason for unsubscribing. Optional, do not plan to save it in DB, only for logging purposes.
	Reason         *string `json:"reason,omitempty"`
	SubscriptionId string  `json:"subscription_id"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostLoginGithubAuthorizeJSONRequestBody defines body for PostLoginGithubAuthorize for application/json ContentType.
type PostLoginGithubAuthorizeJSONRequestBody = GitHubAuthRequestBody

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = PostRequest

// PutPostsSlugJSONRequestBody defines body for PutPostsSlug for application/json ContentType.
type PutPostsSlugJSONRequestBody = PutPostRequest

// DeleteSubscribersJSONRequestBody defines body for DeleteSubscribers for application/json ContentType.
type DeleteSubscribersJSONRequestBody = UnsubscribeRequest

// PostSubscribersJSONRequestBody defines body for PostSubscribers for application/json ContentType.
type PostSubscribersJSONRequestBody = CreateSubscriberRequest

// PostSubscribersConfirmJSONRequestBody defines body for PostSubscribersConfirm for application/json ContentType.
type PostSubscribersConfirmJSONRequestBody = ConfirmSubscriberRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Authorize with GitHub
	// (POST /login/github/authorize)
	PostLoginGithubAuthorize(ctx echo.Context) error
	// Refresh the JWT token
	// (POST /login/refresh)
	PostLoginRefresh(ctx echo.Context) error
	// Get all posts
	// (GET /posts)
	GetPosts(ctx echo.Context, params GetPostsParams) error
	// Create a new post
	// (POST /posts)
	PostPosts(ctx echo.Context) error
	// Get a post by slug
	// (GET /posts/{slug})
	GetPostsSlug(ctx echo.Context, slug string) error
	// Update a post by slug
	// (PUT /posts/{slug})
	PutPostsSlug(ctx echo.Context, slug string) error
	// Send a post by slug via email
	// (POST /posts/{slug}/send-email)
	PostPostsSlugSendEmail(ctx echo.Context, slug string) error
	// Unsubscribe from the blog
	// (DELETE /subscribers)
	DeleteSubscribers(ctx echo.Context) error
	// Create subscriber for the blog
	// (POST /subscribers)
	PostSubscribers(ctx echo.Context) error
	// Confirm subscriber's email
	// (POST /subscribers/confirm)
	PostSubscribersConfirm(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// PostLoginGithubAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginGithubAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginGithubAuthorize(ctx)
	return err
}

// PostLoginRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginRefresh(ctx)
	return err
}

// GetPosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPosts(ctx, params)
	return err
}

// PostPosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostPosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPosts(ctx)
	return err
}

// GetPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostsSlug(ctx, slug)
	return err
}

// PutPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) PutPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutPostsSlug(ctx, slug)
	return err
}

// PostPostsSlugSendEmail converts echo context to params.
func (w *ServerInterfaceWrapper) PostPostsSlugSendEmail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPostsSlugSendEmail(ctx, slug)
	return err
}

// DeleteSubscribers converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubscribers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSubscribers(ctx)
	return err
}

// PostSubscribers converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscribers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSubscribers(ctx)
	return err
}

// PostSubscribersConfirm converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscribersConfirm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSubscribersConfirm(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.POST(baseURL+"/login/github/authorize", wrapper.PostLoginGithubAuthorize)
	router.POST(baseURL+"/login/refresh", wrapper.PostLoginRefresh)
	router.GET(baseURL+"/posts", wrapper.GetPosts)
	router.POST(baseURL+"/posts", wrapper.PostPosts)
	router.GET(baseURL+"/posts/:slug", wrapper.GetPostsSlug)
	router.PUT(baseURL+"/posts/:slug", wrapper.PutPostsSlug)
	router.POST(baseURL+"/posts/:slug/send-email", wrapper.PostPostsSlugSendEmail)
	router.DELETE(baseURL+"/subscribers", wrapper.DeleteSubscribers)
	router.POST(baseURL+"/subscribers", wrapper.PostSubscribers)
	router.POST(baseURL+"/subscribers/confirm", wrapper.PostSubscribersConfirm)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
