// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// CreateSubscriberRequest defines model for CreateSubscriberRequest.
type CreateSubscriberRequest struct {
	// Captcha The captcha token
	Captcha string `json:"captcha"`
	Email   string `json:"email"`
}

// GitHubAuthRequestBody defines model for GitHubAuthRequestBody.
type GitHubAuthRequestBody struct {
	Code string `json:"code"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Status string `json:"status"`
}

// JWTToken defines model for JWTToken.
type JWTToken struct {
	Token string `json:"token"`
}

// PostRequest A post object to be created
type PostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`

	// Slug The URL slug of the post. Should be unique and URL-friendly.
	Slug  string `json:"slug"`
	Title string `json:"title"`
}

// PostResponse A post object after it's been created or fetched
type PostResponse struct {
	Content     string    `json:"content"`
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Id          int       `json:"id"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int       `json:"reading_time"`
	Slug        string    `json:"slug"`
	Title       string    `json:"title"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// PostsListItem defines model for PostsListItem.
type PostsListItem struct {
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int    `json:"reading_time"`
	Slug        string `json:"slug"`
	Title       string `json:"title"`
}

// PostsListResponse A list of posts
type PostsListResponse struct {
	Posts []PostsListItem `json:"posts"`
	Total int             `json:"total"`
}

// PutPostRequest A post object to be updated
type PutPostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`
	Title    string    `json:"title"`
}

// RequestError defines model for RequestError.
type RequestError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// UnsubscribeRequest defines model for UnsubscribeRequest.
type UnsubscribeRequest struct {
	// Reason The reason for unsubscribing. Optional, do not plan to save it in DB, only for logging purposes.
	Reason         *string `json:"reason,omitempty"`
	SubscriptionId string  `json:"subscription_id"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostLoginGithubAuthorizeJSONRequestBody defines body for PostLoginGithubAuthorize for application/json ContentType.
type PostLoginGithubAuthorizeJSONRequestBody = GitHubAuthRequestBody

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = PostRequest

// PutPostsSlugJSONRequestBody defines body for PutPostsSlug for application/json ContentType.
type PutPostsSlugJSONRequestBody = PutPostRequest

// DeleteSubscribersJSONRequestBody defines body for DeleteSubscribers for application/json ContentType.
type DeleteSubscribersJSONRequestBody = UnsubscribeRequest

// PostSubscribersJSONRequestBody defines body for PostSubscribers for application/json ContentType.
type PostSubscribersJSONRequestBody = CreateSubscriberRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Authorize with GitHub
	// (POST /login/github/authorize)
	PostLoginGithubAuthorize(ctx echo.Context) error
	// Refresh the JWT token
	// (POST /login/refresh)
	PostLoginRefresh(ctx echo.Context) error
	// Get all posts
	// (GET /posts)
	GetPosts(ctx echo.Context, params GetPostsParams) error
	// Create a new post
	// (POST /posts)
	PostPosts(ctx echo.Context) error
	// Get a post by slug
	// (GET /posts/{slug})
	GetPostsSlug(ctx echo.Context, slug string) error
	// Update a post by slug
	// (PUT /posts/{slug})
	PutPostsSlug(ctx echo.Context, slug string) error
	// Send a post by slug via email
	// (POST /posts/{slug}/send-email)
	PostPostsSlugSendEmail(ctx echo.Context, slug string) error
	// Unsubscribe from the blog
	// (DELETE /subscribers)
	DeleteSubscribers(ctx echo.Context) error
	// Create subscriber for the blog
	// (POST /subscribers)
	PostSubscribers(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// PostLoginGithubAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginGithubAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginGithubAuthorize(ctx)
	return err
}

// PostLoginRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginRefresh(ctx)
	return err
}

// GetPosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPosts(ctx, params)
	return err
}

// PostPosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostPosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPosts(ctx)
	return err
}

// GetPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostsSlug(ctx, slug)
	return err
}

// PutPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) PutPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutPostsSlug(ctx, slug)
	return err
}

// PostPostsSlugSendEmail converts echo context to params.
func (w *ServerInterfaceWrapper) PostPostsSlugSendEmail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPostsSlugSendEmail(ctx, slug)
	return err
}

// DeleteSubscribers converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubscribers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSubscribers(ctx)
	return err
}

// PostSubscribers converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscribers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSubscribers(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.POST(baseURL+"/login/github/authorize", wrapper.PostLoginGithubAuthorize)
	router.POST(baseURL+"/login/refresh", wrapper.PostLoginRefresh)
	router.GET(baseURL+"/posts", wrapper.GetPosts)
	router.POST(baseURL+"/posts", wrapper.PostPosts)
	router.GET(baseURL+"/posts/:slug", wrapper.GetPostsSlug)
	router.PUT(baseURL+"/posts/:slug", wrapper.PutPostsSlug)
	router.POST(baseURL+"/posts/:slug/send-email", wrapper.PostPostsSlugSendEmail)
	router.DELETE(baseURL+"/subscribers", wrapper.DeleteSubscribers)
	router.POST(baseURL+"/subscribers", wrapper.PostSubscribers)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
