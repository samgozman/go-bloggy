// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// GitHubAuthRequestBody defines model for GitHubAuthRequestBody.
type GitHubAuthRequestBody struct {
	Code string `json:"code"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Status string `json:"status"`
}

// JWTToken defines model for JWTToken.
type JWTToken struct {
	Token string `json:"token"`
}

// PostRequest A post object to be created
type PostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`

	// Slug The URL slug of the post. Should be unique and URL-friendly.
	Slug  string `json:"slug"`
	Title string `json:"title"`
}

// PostResponse A post object after it's been created or fetched
type PostResponse struct {
	Content     string    `json:"content"`
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Id          int       `json:"id"`
	Keywords    *[]string `json:"keywords,omitempty"`
	Slug        string    `json:"slug"`
	Title       string    `json:"title"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// RequestError defines model for RequestError.
type RequestError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// PostLoginGithubAuthorizeJSONRequestBody defines body for PostLoginGithubAuthorize for application/json ContentType.
type PostLoginGithubAuthorizeJSONRequestBody = GitHubAuthRequestBody

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = PostRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Authorize with GitHub
	// (POST /login/github/authorize)
	PostLoginGithubAuthorize(ctx echo.Context) error
	// Refresh the JWT token
	// (POST /login/refresh)
	PostLoginRefresh(ctx echo.Context) error
	// Create a new post
	// (POST /posts)
	PostPosts(ctx echo.Context) error
	// Get a post by slug
	// (GET /posts/{slug})
	GetPostsSlug(ctx echo.Context, slug string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// PostLoginGithubAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginGithubAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginGithubAuthorize(ctx)
	return err
}

// PostLoginRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginRefresh(ctx)
	return err
}

// PostPosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostPosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPosts(ctx)
	return err
}

// GetPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostsSlug(ctx, slug)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.POST(baseURL+"/login/github/authorize", wrapper.PostLoginGithubAuthorize)
	router.POST(baseURL+"/login/refresh", wrapper.PostLoginRefresh)
	router.POST(baseURL+"/posts", wrapper.PostPosts)
	router.GET(baseURL+"/posts/:slug", wrapper.GetPostsSlug)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYf2/bOBL9KnPsAb0/ZMtO2l5roDgkRuo6TZsica6LbYqUEkcSG4pUSaqJW/i7L0jJ",
	"P2TLTbpIggV2gcCRxSHfcPjezNA/SKzyQkmU1pDBD2LiDHPqH0fcvi6jvdJmJ/i1RGP3FZu6gUKrArXl",
	"6M1ixdD9x2uaFwLJgPR3dp88ffbf5y96NIoZJiQgdlq4EWM1lymZzQKi8WvJNTIy+Fgt8WlhpaIvGFsy",
	"C8hrpMJmwwzjyxM0hZIGNx0wltrSNF04fnMjaD2tDfbww2SiLlFuYtn56yUUTg+zaBTzY344Pvs+7r/j",
	"YzOWJ0/j4fjZ+LL47f/DwxfdbvdGf6ql29x5r4ytj8BBMzSx5oXlSpIB2YNCGQuVNVgFEUKskVpkJNg4",
	"KmlR2qb/jx49gtcohArgSmnB/nUuN30NmqibTphMaQsrb0ElYDOsvEuU9l+4ZHgNBU2RBCsuTDJugBvI",
	"p5Bwbayf1ObEJU6vlGZm04M39cgCaoF7enAMVDIwSHWcQVHqQhk0JCDcYt7kzUeSKkFlSgKiCpS04CsH",
	"snSjfkG1plP33Ygy3XRpkiGcnRyBG12NRhdOM1UK5k6qlPxrid6/s5OjTqI5Siam3UZ48mnHh6WzLSyW",
	"W7Gmwbc/D+U69/wC9UaaZx0sWLOdmktl/oybNLGogdvHBiJEOWcpKA0J2ji7Y8LWy1/Qtek7vZ1+p/e8",
	"0+tPer2B//udBCRROnemhFGLHctzvIUK/gSFOWtM7C9MuLSYol6n+Z2T9F55FZCyYHcd9jWycseTWzG2",
	"QYKGa21crlPsgdZK36bMoTO88O9b4pCjMS7PNab4tWE+dKuyuFxp02c3gctEzaVCYx90SXNndUpzGKnv",
	"OXUhKbUgA5JZW5hBGKbcZmXUjVUeGpqn3ihMVScSKk2nG0R3+Z27LcB52evtPAPB08xeofuEiMaXKJnP",
	"tQy/oXBRM4/BfSpJBbhFXboVPMY6TdQevh1P4Kh++2suhpFQUZhTLsOj8fDg3enBCl/JSMG+N4O992MS",
	"kG+oTbWRXrfX7TvTuXIGZLfb7/Zc5qE28ycdZr7rcI8ptlRc344ArxK6Qf3NZTUDZeHTuC6l5HNxaurm",
	"jJnzCW3VzRB3yFXG9HA7vd5aqqNFIXjsp4ZfTJVpqr7MPf1bY+KyYLhs3MK6awvb+iXPkuYOjt94rpky",
	"z6mekkHdZ0HsJvqhUKiUy/oQQlraTGn+vWq+VFsbcnAdZ1SmCBSqvhEce+E/iVa5O4VzOTqYwOeW062Q",
	"lMNYAv0vFhylveDsZUU5jYxrjO1FqfnLz+fSsY3C4YcJ+L7Jl4BmwF1pOnJrjzzW3mIPlchW+tk7CX17",
	"tzxratrqEmf3eP6LxnXLoQfkyR2iNRJmC+I+ZTDvWz307oNBv1I64oyhBJ+l52otTaVVqSxQIdQVMtcy",
	"0zhGY7wFZTmXUFCJYk0jCwLBFbdZzfJVsWhMNJpsu0ZOKgOPs2Cuc833RHhdeJIEJEPKUHtyzEFpe989",
	"WV2JrDMtWAnmsgbtI9WofSbfjSvxuEdcLcaRt2kpULOtKqs3R/6+7O4/GPSZXCRK9gsEXyN0Kx0rQjv+",
	"mu1EHvquCihIvJo3gttJK0sh1nfg8JzZwzG3jbjv/Tbvpx6sXtpvVQX6dwy9vfwP658H/hHMjYJxbr54",
	"MDeHSiaCx7bpor9DU6GRsingNXecbSp5U49LFYc/3BVptrWbHaEFWmFEU6ivUxutq1fKaTVYUE1ztF7s",
	"H2/7owdxNxUy8F02CeYXgBpuu/jXVfzpHsvLTbL5C5SYJw8G/U5ZeKVKyVq4yBQa+dhWXFyjYgudZrPZ",
	"7I8AAAD//wy7w6hnFgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
