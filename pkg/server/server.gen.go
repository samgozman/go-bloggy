// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// GitHubAuthRequestBody defines model for GitHubAuthRequestBody.
type GitHubAuthRequestBody struct {
	Code string `json:"code"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Status string `json:"status"`
}

// JWTToken defines model for JWTToken.
type JWTToken struct {
	Token string `json:"token"`
}

// PostRequest A post object to be created
type PostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`

	// Slug The URL slug of the post. Should be unique and URL-friendly.
	Slug  string `json:"slug"`
	Title string `json:"title"`
}

// PostResponse A post object after it's been created or fetched
type PostResponse struct {
	Content     string    `json:"content"`
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Id          int       `json:"id"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int       `json:"reading_time"`
	Slug        string    `json:"slug"`
	Title       string    `json:"title"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// PostsListItem defines model for PostsListItem.
type PostsListItem struct {
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int    `json:"reading_time"`
	Slug        string `json:"slug"`
	Title       string `json:"title"`
}

// PostsListResponse A list of posts
type PostsListResponse struct {
	Posts []PostsListItem `json:"posts"`
	Total int             `json:"total"`
}

// RequestError defines model for RequestError.
type RequestError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostLoginGithubAuthorizeJSONRequestBody defines body for PostLoginGithubAuthorize for application/json ContentType.
type PostLoginGithubAuthorizeJSONRequestBody = GitHubAuthRequestBody

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = PostRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Authorize with GitHub
	// (POST /login/github/authorize)
	PostLoginGithubAuthorize(ctx echo.Context) error
	// Refresh the JWT token
	// (POST /login/refresh)
	PostLoginRefresh(ctx echo.Context) error
	// Get all posts
	// (GET /posts)
	GetPosts(ctx echo.Context, params GetPostsParams) error
	// Create a new post
	// (POST /posts)
	PostPosts(ctx echo.Context) error
	// Get a post by slug
	// (GET /posts/{slug})
	GetPostsSlug(ctx echo.Context, slug string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// PostLoginGithubAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginGithubAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginGithubAuthorize(ctx)
	return err
}

// PostLoginRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginRefresh(ctx)
	return err
}

// GetPosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPosts(ctx, params)
	return err
}

// PostPosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostPosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPosts(ctx)
	return err
}

// GetPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostsSlug(ctx, slug)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.POST(baseURL+"/login/github/authorize", wrapper.PostLoginGithubAuthorize)
	router.POST(baseURL+"/login/refresh", wrapper.PostLoginRefresh)
	router.GET(baseURL+"/posts", wrapper.GetPosts)
	router.POST(baseURL+"/posts", wrapper.PostPosts)
	router.GET(baseURL+"/posts/:slug", wrapper.GetPostsSlug)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY8U/bOBT+V3zeSbsfQpPCthuVphMgxsoYICi3042JOfFL4uHYwXYG3dT//WQnaZs0",
	"BXZX0KSbhEqbPPs9+33f8/f8DUcyy6UAYTQefMM6SiEj7useM2+KcKsw6QlcFaDNtqRj+yJXMgdlGDiz",
	"SFKw/+GGZDkHPMD99Y1nz1/8/nIzIGFEIcYeNuPcvtFGMZHgycTDCq4KpoDiwYdyio9TKxl+hsjgiYff",
	"AOEm3UkhujwBnUuhYTEAbYgpdDOEo7d3Oq2Gdbndfz8ayUsQi75M/XjmCsb7abgXsSO2Pzz7OuwfsqEe",
	"ipPn0c7wxfAy/+vPnf3NXq93Zzzl1F3hHEttqhRY1xR0pFhumBR4gLdQLrVBpTUyEoWAIgXEAMXeQqqE",
	"AWGa8T958gS9Ac6lh66l4vSXc7EYq9f0uhiETqUyaO4pkjEyKZTRxVK5H0xQuEE5SQB7cyGMUqYR0ygb",
	"o5gpbdygriAuYXwtFdWLEbyt3kxdTf2e7h4hIijSQFSUorxQudSgsYeZgayJmw84kZyIBHtY5iBIzuYS",
	"MgujekCUImP7W/MiWQxplAI6OzlA9u38bvTQaSoLTm2mCsGuCnDxnZ0crMWKgaB83GtsTzZec9uytmxb",
	"DDO8xcF3t29lG3tugmohzVx7U9Qsh+aMmbdhk8QGFGLmqUYhgKhRiqRCMZgoXTFgq+kvSGv4erDeXwte",
	"rgX9URAM3N/f2MOxVJk1xZQYWDMsg3uw4F9AmNHGwP7UhAkDCag2zFcGUgWEMpFcuKUtpirPlbxhGTEV",
	"dSpzZM0RE0hDJAXV88DcDLqCr8nwoPj1cJHTVae3RQpm8XgvZrQ2t4G9RqTLKKQPmDZDA1nH8fpjwvgn",
	"RFdZYpfD51bE3FZ5ObOVN3bB6YXCWj6dz92vCmJbXP2ZHvQrMeg3IdqROCMN4XfVtdaG1IGVY7vWWWme",
	"XaWkuo/uBGt44Z53ZDADra3waAxxc6P61b106mymxZjtACZiWZ9dJHKsFcTiGZ+SDO3JrxmxKS8UxwOc",
	"GpPrge8nzKRF2Itk5muSJc7IT+RayGWSjBcoawUXs0tA50UQrL9AnCWpuQb7iUISXYKgTvxQ+ALc7pp+",
	"iuynFIQjO6ndec4iqNBTRfhuOEIH1dPvC9EPuQz9jDDhHwx3dg9Pd+dYg/ck2nZmaOt4iD38BZQuFxL0",
	"gl7fmtZ1YoA3ev1eYBFLTOoy7aeuDbBfE+iQwK4/QKxUWBrUFyszNCpyp6tUIQSrS5EidsyQ2pjAlO2F",
	"419JJOduPQha2oPkOWeRG+p/1mXNLLlxF3O6GhiHkuYKjt46rOkiy4ga40HV+KDIDnSvfC4TJqok+KQw",
	"qVTsK9RcXtyU3ZsoJSIBRFDZyCGLXvRbrGRms3Au9nZH6FNHdktP0vqYOfoj4gyEuWD0VQk5BZQpiMxF",
	"odirT+fCoo2g/fcj5BoZp8maG26ryIGde8/52pquoSTZXIO5kq3vbl8nTU4bVcDkAfM/7SSXJN3Dz1bo",
	"rVEwOzxuE4rqRtK53ng016+lChmlIJCr0jVbC11yVUiDCOfyGqjtYUkUgdbOgtCMCZQTAbzFkSmA0DUz",
	"aYXyebIoiBXodDlHTkoD52eKXBuaa1LgJncg8XAKhIJy4Kidku5GeDQ/E24jzZvbzNkZtA1EgXKVfCMq",
	"yWO/wryaC51NxwE1WcqyanH4/4vu/qO5PhPTQkm/A+AtQHfCsQT0VK91HoB74Cafar2Fg+64FoFEkQyM",
	"w/KH9izHJAEkiix0QGP20VUBaoy9Wh5UFzezPaMQk4IbJ/cyJlhWZEukX9vZofNjBapToFac1PdCXZ45",
	"y5jpdr0eeDgjN6Xv9ed3BPLxP9Lh+/Ty7Mxva+YfjjANJDYBNfGW1M8d16cgggRc113Q8lopCs7bIViY",
	"W7PHK5hd9bKmx0PIkPnL23uJj/6KXS9XnTvVNfHPOn1nnbZhbj5amDtSxJxFphmiu/MgXAGhYwQ3zFGz",
	"QdtFPs4OD/+b5kUyuf0MKX2EY1TdUnQfJKfly1sPk2WX33V9t83drLxX7paTv83ijw+oau6izQ+gbJ49",
	"mutDadBrWQjagUUqQYunpsRi1wnShNNkMpn8EwAA//88CNKhbxwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
