// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// GitHubAuthRequestBody defines model for GitHubAuthRequestBody.
type GitHubAuthRequestBody struct {
	Code string `json:"code"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Status string `json:"status"`
}

// JWTToken defines model for JWTToken.
type JWTToken struct {
	Token string `json:"token"`
}

// PostRequest A post object to be created
type PostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`

	// Slug The URL slug of the post. Should be unique and URL-friendly.
	Slug  string `json:"slug"`
	Title string `json:"title"`
}

// PostResponse A post object after it's been created or fetched
type PostResponse struct {
	Content     string    `json:"content"`
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Id          int       `json:"id"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int       `json:"reading_time"`
	Slug        string    `json:"slug"`
	Title       string    `json:"title"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// PostsListItem defines model for PostsListItem.
type PostsListItem struct {
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int    `json:"reading_time"`
	Slug        string `json:"slug"`
	Title       string `json:"title"`
}

// PostsListResponse A list of posts
type PostsListResponse struct {
	Posts []PostsListItem `json:"posts"`
	Total int             `json:"total"`
}

// PutPostRequest A post object to be updated
type PutPostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`
	Title    string    `json:"title"`
}

// RequestError defines model for RequestError.
type RequestError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// SubscriptionRequest defines model for SubscriptionRequest.
type SubscriptionRequest struct {
	// Captcha The captcha token
	Captcha string `json:"captcha"`
	Email   string `json:"email"`
}

// UnsubscribeRequest defines model for UnsubscribeRequest.
type UnsubscribeRequest struct {
	// Reason The reason for unsubscribing. Optional, do not plan to save it in DB, only for logging purposes.
	Reason         *string `json:"reason,omitempty"`
	SubscriptionId string  `json:"subscription_id"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostLoginGithubAuthorizeJSONRequestBody defines body for PostLoginGithubAuthorize for application/json ContentType.
type PostLoginGithubAuthorizeJSONRequestBody = GitHubAuthRequestBody

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = PostRequest

// PutPostsSlugJSONRequestBody defines body for PutPostsSlug for application/json ContentType.
type PutPostsSlugJSONRequestBody = PutPostRequest

// DeleteSubscriptionsJSONRequestBody defines body for DeleteSubscriptions for application/json ContentType.
type DeleteSubscriptionsJSONRequestBody = UnsubscribeRequest

// PostSubscriptionsJSONRequestBody defines body for PostSubscriptions for application/json ContentType.
type PostSubscriptionsJSONRequestBody = SubscriptionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Authorize with GitHub
	// (POST /login/github/authorize)
	PostLoginGithubAuthorize(ctx echo.Context) error
	// Refresh the JWT token
	// (POST /login/refresh)
	PostLoginRefresh(ctx echo.Context) error
	// Get all posts
	// (GET /posts)
	GetPosts(ctx echo.Context, params GetPostsParams) error
	// Create a new post
	// (POST /posts)
	PostPosts(ctx echo.Context) error
	// Get a post by slug
	// (GET /posts/{slug})
	GetPostsSlug(ctx echo.Context, slug string) error
	// Update a post by slug
	// (PUT /posts/{slug})
	PutPostsSlug(ctx echo.Context, slug string) error
	// Send a post by slug via email
	// (POST /posts/{slug}/send-email)
	PostPostsSlugSendEmail(ctx echo.Context, slug string) error
	// Unsubscribe from the blog
	// (DELETE /subscriptions)
	DeleteSubscriptions(ctx echo.Context) error
	// Subscribe to the blog
	// (POST /subscriptions)
	PostSubscriptions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// PostLoginGithubAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginGithubAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginGithubAuthorize(ctx)
	return err
}

// PostLoginRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginRefresh(ctx)
	return err
}

// GetPosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPosts(ctx, params)
	return err
}

// PostPosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostPosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPosts(ctx)
	return err
}

// GetPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostsSlug(ctx, slug)
	return err
}

// PutPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) PutPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutPostsSlug(ctx, slug)
	return err
}

// PostPostsSlugSendEmail converts echo context to params.
func (w *ServerInterfaceWrapper) PostPostsSlugSendEmail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPostsSlugSendEmail(ctx, slug)
	return err
}

// DeleteSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubscriptions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSubscriptions(ctx)
	return err
}

// PostSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscriptions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSubscriptions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.POST(baseURL+"/login/github/authorize", wrapper.PostLoginGithubAuthorize)
	router.POST(baseURL+"/login/refresh", wrapper.PostLoginRefresh)
	router.GET(baseURL+"/posts", wrapper.GetPosts)
	router.POST(baseURL+"/posts", wrapper.PostPosts)
	router.GET(baseURL+"/posts/:slug", wrapper.GetPostsSlug)
	router.PUT(baseURL+"/posts/:slug", wrapper.PutPostsSlug)
	router.POST(baseURL+"/posts/:slug/send-email", wrapper.PostPostsSlugSendEmail)
	router.DELETE(baseURL+"/subscriptions", wrapper.DeleteSubscriptions)
	router.POST(baseURL+"/subscriptions", wrapper.PostSubscriptions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
