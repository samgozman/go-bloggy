// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// GitHubAuthRequestBody defines model for GitHubAuthRequestBody.
type GitHubAuthRequestBody struct {
	Code string `json:"code"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Status string `json:"status"`
}

// JWTToken defines model for JWTToken.
type JWTToken struct {
	Token string `json:"token"`
}

// PostRequest A post object to be created
type PostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`

	// Slug The URL slug of the post. Should be unique and URL-friendly.
	Slug  string `json:"slug"`
	Title string `json:"title"`
}

// PostResponse A post object after it's been created or fetched
type PostResponse struct {
	Content     string    `json:"content"`
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Id          int       `json:"id"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int       `json:"reading_time"`
	Slug        string    `json:"slug"`
	Title       string    `json:"title"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// PostsListItem defines model for PostsListItem.
type PostsListItem struct {
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int    `json:"reading_time"`
	Slug        string `json:"slug"`
	Title       string `json:"title"`
}

// PostsListResponse A list of posts
type PostsListResponse struct {
	Posts []PostsListItem `json:"posts"`
	Total int             `json:"total"`
}

// PutPostRequest A post object to be updated
type PutPostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`
	Title    string    `json:"title"`
}

// RequestError defines model for RequestError.
type RequestError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostLoginGithubAuthorizeJSONRequestBody defines body for PostLoginGithubAuthorize for application/json ContentType.
type PostLoginGithubAuthorizeJSONRequestBody = GitHubAuthRequestBody

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = PostRequest

// PutPostsSlugJSONRequestBody defines body for PutPostsSlug for application/json ContentType.
type PutPostsSlugJSONRequestBody = PutPostRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Authorize with GitHub
	// (POST /login/github/authorize)
	PostLoginGithubAuthorize(ctx echo.Context) error
	// Refresh the JWT token
	// (POST /login/refresh)
	PostLoginRefresh(ctx echo.Context) error
	// Get all posts
	// (GET /posts)
	GetPosts(ctx echo.Context, params GetPostsParams) error
	// Create a new post
	// (POST /posts)
	PostPosts(ctx echo.Context) error
	// Get a post by slug
	// (GET /posts/{slug})
	GetPostsSlug(ctx echo.Context, slug string) error
	// Update a post by slug
	// (PUT /posts/{slug})
	PutPostsSlug(ctx echo.Context, slug string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// PostLoginGithubAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginGithubAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginGithubAuthorize(ctx)
	return err
}

// PostLoginRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginRefresh(ctx)
	return err
}

// GetPosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPosts(ctx, params)
	return err
}

// PostPosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostPosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPosts(ctx)
	return err
}

// GetPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostsSlug(ctx, slug)
	return err
}

// PutPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) PutPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutPostsSlug(ctx, slug)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.POST(baseURL+"/login/github/authorize", wrapper.PostLoginGithubAuthorize)
	router.POST(baseURL+"/login/refresh", wrapper.PostLoginRefresh)
	router.GET(baseURL+"/posts", wrapper.GetPosts)
	router.POST(baseURL+"/posts", wrapper.PostPosts)
	router.GET(baseURL+"/posts/:slug", wrapper.GetPostsSlug)
	router.PUT(baseURL+"/posts/:slug", wrapper.PutPostsSlug)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
