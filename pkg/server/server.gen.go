// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// GitHubAuthRequestBody defines model for GitHubAuthRequestBody.
type GitHubAuthRequestBody struct {
	Code string `json:"code"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Status string `json:"status"`
}

// JWTToken defines model for JWTToken.
type JWTToken struct {
	Token string `json:"token"`
}

// PostRequest A post object to be created
type PostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`

	// Slug The URL slug of the post. Should be unique and URL-friendly.
	Slug  string `json:"slug"`
	Title string `json:"title"`
}

// PostResponse A post object after it's been created or fetched
type PostResponse struct {
	Content     string    `json:"content"`
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Id          int       `json:"id"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int       `json:"reading_time"`
	Slug        string    `json:"slug"`
	Title       string    `json:"title"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// PostsListItem defines model for PostsListItem.
type PostsListItem struct {
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Keywords    *[]string `json:"keywords,omitempty"`

	// ReadingTime Approximate post reading time in seconds
	ReadingTime int    `json:"reading_time"`
	Slug        string `json:"slug"`
	Title       string `json:"title"`
}

// PostsListResponse A list of posts
type PostsListResponse struct {
	Posts []PostsListItem `json:"posts"`
	Total int             `json:"total"`
}

// PutPostRequest A post object to be updated
type PutPostRequest struct {
	Content string `json:"content"`

	// Description A short description of the post for the index page
	Description string `json:"description"`

	// Keywords Keywords for the post for SEO and search purposes
	Keywords *[]string `json:"keywords,omitempty"`
	Title    string    `json:"title"`
}

// RequestError defines model for RequestError.
type RequestError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// SubscriptionRequest defines model for SubscriptionRequest.
type SubscriptionRequest struct {
	// Captcha The captcha token
	Captcha string `json:"captcha"`
	Email   string `json:"email"`
}

// UnsubscribeRequest defines model for UnsubscribeRequest.
type UnsubscribeRequest struct {
	// Reason The reason for unsubscribing. Optional, do not plan to save it in DB, only for logging purposes.
	Reason         *string `json:"reason,omitempty"`
	SubscriptionId string  `json:"subscription_id"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostLoginGithubAuthorizeJSONRequestBody defines body for PostLoginGithubAuthorize for application/json ContentType.
type PostLoginGithubAuthorizeJSONRequestBody = GitHubAuthRequestBody

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = PostRequest

// PutPostsSlugJSONRequestBody defines body for PutPostsSlug for application/json ContentType.
type PutPostsSlugJSONRequestBody = PutPostRequest

// DeleteSubscriptionsJSONRequestBody defines body for DeleteSubscriptions for application/json ContentType.
type DeleteSubscriptionsJSONRequestBody = UnsubscribeRequest

// PostSubscriptionsJSONRequestBody defines body for PostSubscriptions for application/json ContentType.
type PostSubscriptionsJSONRequestBody = SubscriptionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Authorize with GitHub
	// (POST /login/github/authorize)
	PostLoginGithubAuthorize(ctx echo.Context) error
	// Refresh the JWT token
	// (POST /login/refresh)
	PostLoginRefresh(ctx echo.Context) error
	// Get all posts
	// (GET /posts)
	GetPosts(ctx echo.Context, params GetPostsParams) error
	// Create a new post
	// (POST /posts)
	PostPosts(ctx echo.Context) error
	// Get a post by slug
	// (GET /posts/{slug})
	GetPostsSlug(ctx echo.Context, slug string) error
	// Update a post by slug
	// (PUT /posts/{slug})
	PutPostsSlug(ctx echo.Context, slug string) error
	// Unsubscribe from the blog
	// (DELETE /subscriptions)
	DeleteSubscriptions(ctx echo.Context) error
	// Subscribe to the blog
	// (POST /subscriptions)
	PostSubscriptions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// PostLoginGithubAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginGithubAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginGithubAuthorize(ctx)
	return err
}

// PostLoginRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoginRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoginRefresh(ctx)
	return err
}

// GetPosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPosts(ctx, params)
	return err
}

// PostPosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostPosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPosts(ctx)
	return err
}

// GetPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostsSlug(ctx, slug)
	return err
}

// PutPostsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) PutPostsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutPostsSlug(ctx, slug)
	return err
}

// DeleteSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubscriptions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSubscriptions(ctx)
	return err
}

// PostSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscriptions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSubscriptions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.POST(baseURL+"/login/github/authorize", wrapper.PostLoginGithubAuthorize)
	router.POST(baseURL+"/login/refresh", wrapper.PostLoginRefresh)
	router.GET(baseURL+"/posts", wrapper.GetPosts)
	router.POST(baseURL+"/posts", wrapper.PostPosts)
	router.GET(baseURL+"/posts/:slug", wrapper.GetPostsSlug)
	router.PUT(baseURL+"/posts/:slug", wrapper.PutPostsSlug)
	router.DELETE(baseURL+"/subscriptions", wrapper.DeleteSubscriptions)
	router.POST(baseURL+"/subscriptions", wrapper.PostSubscriptions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"P8tifSgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
